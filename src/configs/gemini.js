import { config } from 'dotenv';
import {
  GoogleGenerativeAI,
  HarmCategory,
  HarmBlockThreshold,
} from '@google/generative-ai';

// Load .env.local file
config({ path: '.env' });

const apiKey = process.env.GEMINI_API_KEY;
const genAI = new GoogleGenerativeAI(apiKey);

const model = genAI.getGenerativeModel({
  model: 'gemini-1.5-flash',
});

const generationConfig = {
  temperature: 1,
  topP: 0.95,
  topK: 40,
  maxOutputTokens: 8192,
  responseMimeType: 'application/json',
};

export const courseOutlineAIModel = model.startChat({
  generationConfig,
  history: [
    {
      role: 'user',
      parts: [
        {
          text: 'Generate study material for Python, Skill Practice, Medium difficulty with concise summaries and topics.',
        },
      ],
    },
    {
      role: 'model',
      parts: [
        {
          text: "Okay, here's a breakdown of study material for Python, categorized for a \"Medium\" skill level with concise summaries and practice topics:\n\n**Overall Focus:**\n\nAt a medium skill level, you should be comfortable with the basics and now be focused on:\n\n*   **Data Structures Mastery:** Deepening your understanding and application of lists, dictionaries, sets, and tuples.\n*   **Function Power:** Utilizing more advanced function techniques like closures, decorators, and generators.\n*   **Object-Oriented Principles:** Understanding and implementing classes, inheritance, and polymorphism.\n*   **Error Handling:** Using exceptions effectively to write robust code.\n*   **Standard Library Proficiency:** Leveraging useful modules like `collections`, `itertools`, `datetime`, etc.\n\n**Study Material Outline:**\n\nHere's a structured approach with topics, summaries, and skill practice ideas:\n\n**1. Advanced Data Structures**\n\n*   **Summary:** Building on basic structures, learn to optimize for specific tasks. Understand time complexity implications for each.\n    *   **Lists:** List comprehensions, slicing, common methods (sort, reverse, etc.), and performance considerations.\n    *   **Dictionaries:** Efficient key-value storage, dictionary comprehensions, nested dictionaries, common methods (get, setdefault, etc.)\n    *   **Sets:** Unordered collections of unique items, set operations (union, intersection, etc.), and use cases like deduplication.\n    *   **Tuples:** Immutable sequences, tuple packing/unpacking, and use cases for data integrity.\n    *   **`collections` Module:** Explore `Counter`, `defaultdict`, `namedtuple`, `deque` and their specific benefits.\n*   **Skill Practice:**\n    *   **Data Cleaning:** Write a function to clean a messy dataset using lists, dictionaries, and sets. Focus on removing duplicates, standardizing formats, or grouping information.\n    *   **Frequency Analysis:** Use `Counter` to count the occurrences of words in a text file.\n    *   **Inventory Management:** Create a dictionary or nested dictionary to represent an inventory system for a store.\n    *   **Graph Representation:** Represent a graph as a dictionary where keys are nodes and values are lists of neighbors.\n    *   **Performance Comparison:** Experiment with using lists vs sets to find elements in large collections and observe the time differences.\n\n**2. Advanced Functions**\n\n*   **Summary:** Explore Python's powerful function features beyond basic syntax.\n    *   **Closures:** Functions that remember values from their enclosing scope.\n    *   **Decorators:** Functions that modify the behavior of other functions.\n    *   **Generators:** Iterators that generate values on demand, improving efficiency for large datasets.\n    *   **Lambda Functions:** Small, anonymous functions for concise operations.\n    *   **Function Annotations:**  Improve code clarity and type-checking\n*   **Skill Practice:**\n    *   **Logger Decorator:** Create a decorator that logs the function name, arguments, and return value of any function it's applied to.\n    *   **Caching Decorator:** Implement a caching decorator to store the results of expensive function calls.\n    *   **Fibonacci Generator:** Write a generator to produce Fibonacci numbers.\n    *   **Data Transformation:** Use lambda functions within `map()`, `filter()`, and `sorted()` for efficient data transformations.\n    *   **Retry Decorator:** Create a decorator to retry a function that may fail due to network issues.\n\n**3. Object-Oriented Programming (OOP)**\n\n*   **Summary:** Implement real-world entities and relationships using classes, inheritance, and polymorphism.\n    *   **Classes and Objects:** Defining classes with attributes and methods, creating objects (instances).\n    *   **Inheritance:** Creating subclasses that inherit and extend functionality from parent classes.\n    *   **Polymorphism:** Objects of different classes responding to the same method name.\n    *   **Encapsulation:** Protecting internal data with access control (private/protected convention).\n    *   **Special Methods (Dunder Methods):** `__init__`, `__str__`, `__len__`, etc.\n*   **Skill Practice:**\n    *   **Shape Hierarchy:** Create a class hierarchy for shapes (e.g., Circle, Square, Triangle), demonstrate inheritance and polymorphism.\n    *   **Library System:** Model a library system with classes for books, members, and loans.\n    *   **Game Development:** Create simple game elements using classes (e.g., Player, Enemy).\n    *   **Custom Data Structure:** Implement a stack or a queue using OOP.\n    *   **Abstract Class:** Design an abstract class with methods that must be implemented in sub classes.\n\n**4. Error Handling**\n\n*   **Summary:** Write code that can handle exceptional situations and prevent crashes.\n    *   **`try`, `except`, `finally` Blocks:** Handling specific exceptions and ensuring code always runs.\n    *   **Raising Exceptions:** Triggering custom exceptions.\n    *   **Custom Exception Classes:** Creating specific exceptions for domain logic.\n    *   **Best Practices:** Knowing when to catch, log, or re-raise exceptions.\n*   **Skill Practice:**\n    *   **File Handling:** Write a function that reads a file, gracefully handles `FileNotFoundError`, and logs errors.\n    *   **Input Validation:** Create functions that accept user input and raise custom exceptions for invalid data.\n    *   **Zero Division Error:** Handle ZeroDivisionError gracefully in a simple math operation and provide a user-friendly message.\n    *   **API Calls:** Add exception handling to function making external API calls to improve resilience.\n    *   **Resource Management:** Use `finally` to close file resources properly, even when errors occur.\n\n**5. Standard Library Exploration**\n\n*   **Summary:**  Leverage the wealth of modules provided by Python.\n    *   **`itertools`:** Creating iterators for complex sequences and combinations.\n    *   **`datetime`:** Working with dates and times.\n    *   **`os` and `shutil`:** Interacting with the operating system.\n    *   **`re`:** Working with regular expressions for text matching and manipulation.\n    *   **`json`:**  Encoding and decoding JSON data.\n    *   **`random`:** Generating random numbers and sequences.\n*   **Skill Practice:**\n    *   **Date Formatting:** Write functions to format dates in different styles and perform date calculations.\n    *   **File Processing:** Write a script that uses `os` and `shutil` to find, move, or rename files based on criteria.\n    *   **Text Extraction:** Use regular expressions to extract specific information from text documents.\n    *   **Data Simulation:** Use the `random` module to create simulations and generate random datasets for testing.\n    *   **JSON Parsing:** Read JSON data from a file or web API and process it.\n\n**General Practice Tips:**\n\n*   **Code Regularly:**  Practice coding every day to reinforce learning.\n*   **Solve Problems:**  Work on small programming challenges on sites like LeetCode, HackerRank, or CodeWars.\n*   **Read Code:**  Look at open-source projects to see how others implement solutions.\n*   **Debug Effectively:** Learn to use debugging tools and techniques.\n*   **Build Projects:** Work on personal projects to solidify your understanding and add to your portfolio.\n\n**Important Note:** This is a general guideline. Adjust the focus areas based on your specific learning goals and the areas you want to strengthen.\n",
        },
      ],
    },
    {
      role: 'user',
      parts: [
        {
          text: 'Generate study material for Python, Skill Practice, Medium difficulty with concise summaries and topics. Outpu should be a JSON format',
        },
      ],
    },
    {
      role: 'model',
      parts: [
        {
          text: '```json\n{\n  "study_material": {\n    "level": "Medium",\n    "language": "Python",\n    "topics": [\n      {\n        "name": "Advanced Data Structures",\n        "summary": "Building on basic structures, learn to optimize for specific tasks. Understand time complexity implications for each.",\n        "subtopics": [\n          {\n            "name": "Lists",\n            "summary": "List comprehensions, slicing, common methods (sort, reverse, etc.), and performance considerations."\n          },\n          {\n            "name": "Dictionaries",\n            "summary": "Efficient key-value storage, dictionary comprehensions, nested dictionaries, common methods (get, setdefault, etc.)"\n          },\n          {\n            "name": "Sets",\n            "summary": "Unordered collections of unique items, set operations (union, intersection, etc.), and use cases like deduplication."\n          },\n          {\n            "name": "Tuples",\n            "summary": "Immutable sequences, tuple packing/unpacking, and use cases for data integrity."\n          },\n           {\n            "name": "collections Module",\n            "summary": "Explore `Counter`, `defaultdict`, `namedtuple`, `deque` and their specific benefits."\n          }\n        ],\n        "skill_practice": [\n          "Data Cleaning: Write a function to clean a messy dataset using lists, dictionaries, and sets. Focus on removing duplicates, standardizing formats, or grouping information.",\n          "Frequency Analysis: Use `Counter` to count the occurrences of words in a text file.",\n          "Inventory Management: Create a dictionary or nested dictionary to represent an inventory system for a store.",\n          "Graph Representation: Represent a graph as a dictionary where keys are nodes and values are lists of neighbors.",\n          "Performance Comparison: Experiment with using lists vs sets to find elements in large collections and observe the time differences."\n        ]\n      },\n      {\n        "name": "Advanced Functions",\n        "summary": "Explore Python\'s powerful function features beyond basic syntax.",\n        "subtopics": [\n          {\n            "name": "Closures",\n            "summary": "Functions that remember values from their enclosing scope."\n          },\n          {\n            "name": "Decorators",\n            "summary": "Functions that modify the behavior of other functions."\n          },\n          {\n            "name": "Generators",\n            "summary": "Iterators that generate values on demand, improving efficiency for large datasets."\n          },\n          {\n            "name": "Lambda Functions",\n            "summary": "Small, anonymous functions for concise operations."\n          },\n           {\n            "name": "Function Annotations",\n            "summary": "Improve code clarity and type-checking"\n          }\n        ],\n        "skill_practice": [\n          "Logger Decorator: Create a decorator that logs the function name, arguments, and return value of any function it\'s applied to.",\n          "Caching Decorator: Implement a caching decorator to store the results of expensive function calls.",\n          "Fibonacci Generator: Write a generator to produce Fibonacci numbers.",\n          "Data Transformation: Use lambda functions within `map()`, `filter()`, and `sorted()` for efficient data transformations.",\n          "Retry Decorator: Create a decorator to retry a function that may fail due to network issues."\n         ]\n      },\n      {\n        "name": "Object-Oriented Programming (OOP)",\n        "summary": "Implement real-world entities and relationships using classes, inheritance, and polymorphism.",\n         "subtopics": [\n          {\n            "name": "Classes and Objects",\n            "summary": "Defining classes with attributes and methods, creating objects (instances)."\n          },\n          {\n            "name": "Inheritance",\n             "summary": "Creating subclasses that inherit and extend functionality from parent classes."\n          },\n          {\n            "name": "Polymorphism",\n            "summary": "Objects of different classes responding to the same method name."\n          },\n          {\n            "name": "Encapsulation",\n            "summary": "Protecting internal data with access control (private/protected convention)."\n          },\n           {\n             "name": "Special Methods (Dunder Methods)",\n            "summary": "`__init__`, `__str__`, `__len__`, etc."\n          }\n        ],\n        "skill_practice": [\n          "Shape Hierarchy: Create a class hierarchy for shapes (e.g., Circle, Square, Triangle), demonstrate inheritance and polymorphism.",\n          "Library System: Model a library system with classes for books, members, and loans.",\n          "Game Development: Create simple game elements using classes (e.g., Player, Enemy).",\n          "Custom Data Structure: Implement a stack or a queue using OOP.",\n          "Abstract Class: Design an abstract class with methods that must be implemented in sub classes."\n        ]\n      },\n      {\n        "name": "Error Handling",\n         "summary": "Write code that can handle exceptional situations and prevent crashes.",\n        "subtopics": [\n          {\n            "name": "`try`, `except`, `finally` Blocks",\n            "summary": "Handling specific exceptions and ensuring code always runs."\n          },\n          {\n             "name": "Raising Exceptions",\n             "summary": "Triggering custom exceptions."\n           },\n          {\n            "name": "Custom Exception Classes",\n             "summary":"Creating specific exceptions for domain logic."\n          },\n           {\n            "name": "Best Practices",\n            "summary":"Knowing when to catch, log, or re-raise exceptions."\n          }\n        ],\n         "skill_practice": [\n            "File Handling: Write a function that reads a file, gracefully handles `FileNotFoundError`, and logs errors.",\n             "Input Validation: Create functions that accept user input and raise custom exceptions for invalid data.",\n              "Zero Division Error: Handle ZeroDivisionError gracefully in a simple math operation and provide a user-friendly message.",\n             "API Calls: Add exception handling to function making external API calls to improve resilience.",\n            "Resource Management: Use `finally` to close file resources properly, even when errors occur."\n        ]\n      },\n      {\n        "name": "Standard Library Exploration",\n         "summary": "Leverage the wealth of modules provided by Python.",\n         "subtopics": [\n          {\n            "name": "`itertools`",\n             "summary": "Creating iterators for complex sequences and combinations."\n          },\n          {\n            "name": "`datetime`",\n             "summary":"Working with dates and times."\n          },\n          {\n           "name": "`os` and `shutil`",\n           "summary":"Interacting with the operating system."\n          },\n          {\n            "name": "`re`",\n             "summary":"Working with regular expressions for text matching and manipulation."\n          },\n          {\n             "name":"`json`",\n             "summary":"Encoding and decoding JSON data."\n          },\n          {\n             "name":"`random`",\n             "summary":"Generating random numbers and sequences."\n           }\n        ],\n        "skill_practice": [\n            "Date Formatting: Write functions to format dates in different styles and perform date calculations.",\n            "File Processing: Write a script that uses `os` and `shutil` to find, move, or rename files based on criteria.",\n            "Text Extraction: Use regular expressions to extract specific information from text documents.",\n            "Data Simulation: Use the `random` module to create simulations and generate random datasets for testing.",\n            "JSON Parsing: Read JSON data from a file or web API and process it."\n          ]\n      }\n    ]\n  }\n}\n```\n',
        },
      ],
    },
  ],
});

export const generateNotesAIModel = model.startChat({
  generationConfig,
  history: [
    {
      role: 'user',
      parts: [
        {
          text: 'Generate exam material detailed content for each chapter, make sure to include all topc points in the contenet,\nmake sure to give content in HTML format (Do not Add HTML, Head, Body, title tag). The chapters:\n{\n      "chapterId": "ch1_introduction",\n      "name": "Introduction to Excel Libraries and Setup",\n      "summary": "This chapter covers choosing the right library (e.g., EPPlus, ClosedXML, NPOI) and setting up your development environment to work with Excel files in C#.",\n      "topics": [\n        "Choosing an Excel library (EPPlus, ClosedXML, NPOI)",\n        "Installing necessary NuGet packages",\n        "Project setup and basic C# syntax review"\n      ]\n    }',
        },
      ],
    },
    {
      role: 'model',
      parts: [
        {
          text: '```html\n    <div class="chapter">\n        <h2>Chapter 1: Introduction to Excel Libraries and Setup</h2>\n        <p><strong>Summary:</strong> This chapter covers choosing the right library (e.g., EPPlus, ClosedXML, NPOI) and setting up your development environment to work with Excel files in C#.</p>\n\n        <div class="topic">\n            <h3>Choosing an Excel Library (EPPlus, ClosedXML, NPOI)</h3>\n            <p><strong>Key Concepts:</strong></p>\n            <ul>\n                <li><strong>EPPlus:</strong>\n                    <ul>\n                        <li>A popular, open-source library for .NET.</li>\n                        <li>Excellent performance and feature set, especially for modern Excel files (.xlsx).</li>\n                        <li>Generally considered easy to use and well-documented.</li>\n                        <li>Supports features like formulas, formatting, charts, and more.</li>\n                        <li>Good for complex excel operations and file manipulation.</li>\n                    </ul>\n                </li>\n                <li><strong>ClosedXML:</strong>\n                    <ul>\n                        <li>Another robust, open-source library focusing on ease of use.</li>\n                        <li>Provides a more high-level API, which can be simpler for common tasks.</li>\n                        <li>Good balance of features and ease of learning.</li>\n                         <li>May not have the same level of performance for very large files as EPPlus.</li>\n                         <li>Good for moderate operations and common file handling.</li>\n                    </ul>\n                </li>\n               <li><strong>NPOI:</strong>\n                    <ul>\n                         <li>An open-source library that can work with both older (.xls) and modern (.xlsx) file formats.</li>\n                         <li>Port of the Java POI project to .NET.</li>\n                         <li>Considered by some to be more complex to use.</li>\n                         <li>Good for applications where supporting legacy .xls format is crucial.</li>\n                         <li>Can be a good alternative if other libraries are not working well.</li>\n                     </ul>\n                </li>\n                <li><strong>Factors for Choosing:</strong>\n                    <ul>\n                        <li><strong>File format:</strong> Does your project need to support .xls or just .xlsx?</li>\n                        <li><strong>Performance:</strong> How large are the Excel files you\'ll be working with?</li>\n                        <li><strong>Complexity:</strong> How advanced are the features you need (formulas, charts, complex formatting)?</li>\n                        <li><strong>Ease of Use:</strong> How quickly do you need to learn and use the library?</li>\n                        <li><strong>License:</strong> Check licensing requirements if you are using any proprietary software.</li>\n                        <li><strong>Community Support:</strong> Check active development and community support of your chosen library.</li>\n                    </ul>\n                </li>\n            </ul>\n            <p><strong>Exam Questions Could Cover:</strong>\n                <ul>\n                    <li>Comparing and contrasting EPPlus, ClosedXML, and NPOI based on features, performance and ease of use.</li>\n                    <li>Identifying the best library for a specific scenario (e.g., handling large .xlsx files, supporting older .xls files).</li>\n                    <li>Understanding the advantages and disadvantages of each library.</li>\n                </ul>\n            </p>\n        </div>\n\n        <div class="topic">\n            <h3>Installing Necessary NuGet Packages</h3>\n             <p><strong>Key Concepts:</strong></p>\n             <ul>\n                 <li><strong>NuGet Package Manager:</strong> A tool in Visual Studio (or other .NET IDEs) to manage external libraries and dependencies.</li>\n                 <li><strong>Finding Packages:</strong> Searching for the correct package (e.g., "EPPlus", "ClosedXML", "NPOI") in the NuGet Package Manager.</li>\n                 <li><strong>Installation Process:</strong>\n                     <ul>\n                         <li>Right-click on your project in Solution Explorer.</li>\n                         <li>Select "Manage NuGet Packages."</li>\n                         <li>Search for the chosen library.</li>\n                         <li>Click "Install."</li>\n                         <li>Ensure correct version is installed and compatible with your project target framework.</li>\n                     </ul>\n                 </li>\n                 <li><strong>Dependencies:</strong> NuGet handles dependencies for you, ensuring you have all required packages.</li>\n             </ul>\n             <p><strong>Exam Questions Could Cover:</strong>\n                 <ul>\n                     <li>Describing the process of installing a NuGet package in Visual Studio.</li>\n                     <li>Knowing how to search for specific Excel libraries in the NuGet package manager.</li>\n                     <li>Understanding the role of NuGet in managing project dependencies.</li>\n                     <li>Identifying NuGet package manager errors.</li>\n                 </ul>\n             </p>\n        </div>\n\n        <div class="topic">\n            <h3>Project Setup and Basic C# Syntax Review</h3>\n            <p><strong>Key Concepts:</strong></p>\n            <ul>\n                <li><strong>Creating a New C# Project:</strong> Using Visual Studio or other IDE to create a Console Application or a Class Library project.</li>\n                <li><strong>Basic C# Syntax:</strong>\n                    <ul>\n                        <li><strong>Namespaces:</strong> Understanding `using` statements and how to access classes from other libraries (e.g., `using OfficeOpenXml;` for EPPlus).</li>\n                        <li><strong>Classes and Objects:</strong> Creating instances of classes from the chosen Excel library (e.g., `ExcelPackage` in EPPlus).</li>\n                        <li><strong>Variables and Data Types:</strong> Declaring variables to store data (e.g., file paths, worksheet names).</li>\n                         <li><strong>Error Handling</strong> Basic try and catch exception management to handle file operations errors.</li>\n                    </ul>\n                </li>\n                <li><strong>Adding Required Namespaces:</strong> Adding the appropriate `using` statements in your C# code to access the chosen library\'s classes.</li>\n            </ul>\n            <p><strong>Exam Questions Could Cover:</strong>\n                <ul>\n                    <li>Understanding how to create a basic C# project in Visual Studio or other IDE.</li>\n                    <li>Writing code snippets that use `using` statements for Excel libraries.</li>\n                    <li>Demonstrating a basic understanding of C# syntax relevant to Excel manipulation (class initialization, variable declarations).</li>\n                    <li>Explaining the importance of using correct namespaces for library functionality.</li>\n                </ul>\n            </p>\n        </div>\n    </div>\n```\n',
        },
      ],
    },
  ],
});
